/// Generates TypeScript sources from Pkl
@typescript.Module { name = "pkl_gen_typescript" }
@ModuleInfo { minPklVersion = "0.25.0" }
module pkl.typescript.Generator

import "pkl:reflect"
import "typescript.pkl"
import "internal/gatherer.pkl"
import "internal/TypescriptMapping.pkl"
import "internal/TypescriptModule.pkl"
import "internal/utils.pkl"

/// The module that should be generated.
moduleToGenerate: Module

function getTypescriptModuleName(decl: reflect.TypeDeclaration): String? =
  decl.enclosingDeclaration
    .annotations
    .findOrNull((it) -> it.getClass().toString() == "pkl.typescript.typescript#Module")
    ?.name

function gatherClasses(decl: List<reflect.TypeDeclaration>): Mixin<List<TypescriptMapping>> =
  (acc) ->
    decl
      .filter((it) -> it is reflect.Class)
      .fold(acc, (accum, it) -> accum.add(new TypescriptMapping.Class {
        typescriptModule = getTypescriptModuleName(it)
        source = it
        seenMappings = accum
      }))

function gatherTypeAliases(decl: List<reflect.TypeDeclaration>): Mixin<List<TypescriptMapping>> =
  (acc) ->
    decl
      .filter((it) -> it is reflect.TypeAlias)
      .fold(acc, (accum, it) -> accum.add(new TypescriptMapping.TypeAlias {
        typescriptModule = getTypescriptModuleName(it)
        source = it
        seenMappings = accum
      }))

local allMappings: List<TypescriptMapping> =
  let (clazz = reflect.Module(moduleToGenerate).moduleClass)
  let (declarations = gatherer.gatherTypeDeclarations(clazz, List()))
    List() |>
    gatherClasses(declarations) |>
    gatherTypeAliases(declarations)

local modules = allMappings
  .groupBy((it) -> it.typescriptModule)
  .mapValues((`_moduleName`: String?, _mappings: List<TypescriptMapping>) -> new TypescriptModule {
    typescriptModule = _moduleName
    `module` = _mappings.first.source.enclosingDeclaration
    mappings = _mappings
  })

output {
  files {
    for (_, m in modules) {
      ...m.output.files!!
    }
  }
  text = throw("Generator.pkl only produces multiple-file output. Try running again with the -m flag.")
}
