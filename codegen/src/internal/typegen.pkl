/// Utilities for generating TypeScript types from Pkl.
module pkl.typescript.internal.typegen

import "pkl:reflect"
import "Type.pkl"
import "TypescriptMapping.pkl"

function generateType(
  type: reflect.Type,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  if (type is reflect.DeclaredType)
    generateDeclaredType(type, enclosing, seenMappings)
  else if (type is reflect.ModuleType)
    let (moduleClass = enclosing.enclosingDeclaration.moduleClass)
      generateType(reflect.DeclaredType(moduleClass), moduleClass, seenMappings)
  else if (type is reflect.UnionType) generateUnionType(type, enclosing, seenMappings)
  else if (type is reflect.NullableType)
    let (_elem = generateType(type.member, enclosing, seenMappings))
      new Type.Nullable { elem = _elem }
  else if (type is reflect.UnknownType) anyType
  else if (type is reflect.NothingType) new Type.Declared { typeName = "never" }
  else if (type is reflect.StringLiteralType) new Type.Declared { typeName = "\"\(type.value)\"" }
  else throw("Unsure how to generate this type: \(type)")

function generateUnionType(
  type: reflect.UnionType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  new Type.Union {
    elems =
      type.members.map((t) -> generateType(t, enclosing, seenMappings))
  }

function generateDeclaredType(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  let (referent = type.referent)
  let (reflectee = type.referent.reflectee)
  let (mapped = seenMappings.findOrNull((it) -> it.source == referent))
    if (mapped != null) mapped.type
    else if (mappedTypes.containsKey(reflectee))
      mappedTypes[reflectee]
    else if (referent is reflect.TypeAlias)
      generateType(referent.referent, enclosing, seenMappings)
    else if (reflectee == List || reflectee == Listing)
      generateListing(type, enclosing, seenMappings)
    else if (reflectee == Map || reflectee == Mapping)
      generateMapping(type, enclosing, seenMappings)
    else if (reflectee == Set)
      generateSet(type, enclosing, seenMappings)
    else if (reflectee == Pair)
      generatePair(type, enclosing, seenMappings)
    else throw("Cannot generate type \(type.referent.name) as TypeScript.")

function generateListing(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  let (typeArg = type.typeArguments.getOrNull(0))
    new Type.Array {
      elem =
        if (typeArg == null) anyType
        else generateType(typeArg, enclosing, seenMappings)
    }

function generateMapping(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  let (typeArgKey = type.typeArguments.getOrNull(0))
  let (typeArgValue = type.typeArguments.getOrNull(1))
    new Type.Map {
      key =
        if (typeArgKey == null) anyType
        else generateType(typeArgKey, enclosing, seenMappings)
      elem =
        if (typeArgValue == null) anyType
        else generateType(typeArgValue, enclosing, seenMappings)
    }

function generateSet(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  let (typeArg = type.typeArguments.getOrNull(0))
    new Type.Set {
      elem =
        if (typeArg == null) anyType
        else generateType(typeArg, enclosing, seenMappings)
    }

function generatePair(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<TypescriptMapping>
): Type =
  new Type.Pair {
    elems = type.typeArguments.map((t) -> generateType(t, enclosing, seenMappings))
  }

local anyType: Type.Declared = new Type.Declared { typeName = "pklTypescript.Any" }

mappedTypes: Mapping<Class|TypeAlias, Type> = new {
  [Int] = new Type.Declared { typeName = "number" }
  [Int8] = new Type.Declared { typeName = "number" }
  [Int16] = new Type.Declared { typeName = "number" }
  [Int32] = new Type.Declared { typeName = "number" }
  [UInt] = new Type.Declared { typeName = "number" }
  [UInt8] = new Type.Declared { typeName = "number" }
  [UInt16] = new Type.Declared { typeName = "number" }
  [UInt32] = new Type.Declared { typeName = "number" }
  [Number] = new Type.Declared { typeName = "number" }
  [Float] = new Type.Declared { typeName = "number" }
  [String] = new Type.Declared { typeName = "string" }
  [Boolean] = new Type.Declared { typeName = "boolean" }
  [Null] = new Type.Declared { typeName = "null" }
  [Any] = anyType
  [Char] = new Type.Declared { typeName = "string" }
  [Duration] = new Type.Declared {
    typeName = "pklTypescript.Duration"
  }
  [DurationUnit] = new Type.Declared {
    typeName = "pklTypescript.DurationUnit"
  }
  [Dynamic] = new Type.Declared {
    typeName = "pklTypescript.Dynamic"
  }
  [DataSize] = new Type.Declared {
    typeName = "pklTypescript.DataSize"
  }
  [DataSizeUnit] = new Type.Declared {
    typeName = "pklTypescript.DataSizeUnit"
  }
  [IntSeq] = new Type.Declared {
    typeName = "pklTypescript.IntSeq"
  }
  [Regex] = new Type.Declared {
    typeName = "pklTypescript.Regex"
  }
}
