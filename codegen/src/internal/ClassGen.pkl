module pkl.typescript.internal.ClassGen

extends "Gen.pkl"

import "pkl:reflect"
import "TypescriptMapping.pkl"
import "utils.pkl"
import "Type.pkl"
import "typegen.pkl"

clazz: reflect.Class = mapping.source as reflect.Class

classInfo: TypescriptMapping.Class = mapping as TypescriptMapping.Class

local isModule: Boolean = clazz.enclosingDeclaration.moduleClass == clazz

contents = new Listing {
  when (interface != null) {
    if (isModule) "// Ref: Module root." else "// Ref: Pkl class `\(clazz.enclosingDeclaration.name).\(clazz.name)`."

    interface
  }
}.join("\n")

local isSuperOpen: Boolean = clazz.superclass.modifiers.contains("open")

local isAbstract: Boolean = clazz.modifiers.contains("abstract")

local superClass: TypescriptMapping.Class? = mappings.findOrNull((c) -> c is TypescriptMapping.Class && c.clazz == clazz.superclass) as TypescriptMapping.Class?

local fields: Map<String, TypescriptInterfaceProperty> = getFields(clazz, mappings)

imports =
  fields.values
    .flatMap((f) -> f.type.imports)
    .filter((i) -> i != classInfo.typescriptModule).distinct
  + (if (superClass != null && superClass.typescriptModule != classInfo.typescriptModule) List(superClass.typescriptModule) else List())
  + (if (isModule && !isAbstract)
    List("@pkl-community/pkl-typescript")
    else List())

local function getAllProperties(clazz: reflect.Class?): List<reflect.Property> =
  if (clazz == null) List()
  else if (doesNotInherit(clazz)) clazz.properties.values
  else clazz.properties.values + getAllProperties(clazz.superclass!!)

local function isSameType(typeA: reflect.Type, typeB: reflect.Type) =
  if (typeA is reflect.DeclaredType && typeB is reflect.DeclaredType)
    typeA.referent.reflectee == typeB.referent.reflectee &&
    typeA.typeArguments.length == typeB.typeArguments.length &&
    typeA.typeArguments
      .zip(typeB.typeArguments)
      .every((pair) -> isSameType(pair.first, pair.second))
  else if (typeA is reflect.NullableType && typeB is reflect.NullableType)
    isSameType(typeA.member, typeB.member)
  else if (typeA is reflect.NothingType && typeB is reflect.NothingType)
    true
  else if (typeA is reflect.UnknownType && typeB is reflect.UnknownType)
    true
  else if (typeA is reflect.StringLiteralType && typeB is reflect.StringLiteralType)
    typeA.value == typeB.value
  else if (typeA is reflect.UnionType && typeB is reflect.UnionType)
    typeA.members.length == typeB.members.length &&
    typeA.members.sortBy((m) -> m.referent.reflectee.toString())
      .zip(typeB.members.sortBy((m) -> m.referent.reflectee.toString()))
      .every((pair) -> isSameType(pair.first, pair.second))
  // remaining types: `FunctionType`, `TypeParameter`, `ModuleType`.
  // we can actually check if `ModuleType` refers to the same type by checking if the enclosing declaration is the same,
  // but we will pretend it is always false for now.
  else false

// TypeScript allows extending interfaces to override properties from the parent interface, as long
// as the new type is compatible with the parent property's type. This check is not exhaustive and
// will likely be updated over time.
local function isCompatibleType(parentType: reflect.Type, childType: reflect.Type) =
  (
    parentType is reflect.DeclaredType &&
    (
      (
        // String type can be overridden by string literal type
        parentType == reflect.stringType &&
        childType is reflect.StringLiteralType
      ) ||
      (
        // Same type, different but compatible type arguments
        childType is reflect.DeclaredType &&
        parentType.referent.reflectee == childType.referent.reflectee &&
        (
          parentType.typeArguments
            .zip(childType.typeArguments)
            .every((pair) ->
              isSameType(pair.first, pair.second) ||
              isCompatibleType(pair.first, pair.second)
            )
        )
      )
    )
  )
  ||
  (
    parentType is reflect.UnionType &&
    (
      (
        // Child union can be a subset of the parent union's members
        childType is reflect.UnionType &&
        childType.members.every((m) -> parentType.members.contains(m))
      )
      // Or child type can be one of the types from the parent union
      || parentType.members.contains(childType)
    )
  )

// visible for testing
function getFields(
  clazz: reflect.Class,
  mappings: List<TypescriptMapping>
): Map<String, TypescriptInterfaceProperty> =
  let (isSuperOpen: Boolean = clazz.superclass.modifiers.contains("open"))
  let (superProperties = getAllProperties(clazz.superclass))
    clazz.properties
      .filter((propName, prop: reflect.Property) ->
        let (superProp = superProperties.findOrNull((it) -> it.name == prop.name))
          // don't render hidden members or functions
          if (prop.modifiers.contains("hidden") || prop.type is reflect.FunctionType) false
          // Okay if there is no property override, or if the super property has the same type.
          else if (superProp == null || isSameType(superProp.type, prop.type) || isCompatibleType(superProp.type, prop.type)) true
          // Okay if the property is overridden but does not define a type, but don't render as its own field.
          // E.g. `class Foo extends Bar { bar = "mybar" }`
          else if (prop.type is reflect.UnknownType) !isSuperOpen
          // Otherwise, the property's type has been overridden, and this is currently
          // not supported - would require something like `extends Omit<ParentClass, 'overriddenField'>`
          else throw("""
              Illegal: Class `\(clazz.reflectee)` overrides property `\(propName)`. This is only supported by TypeScript when the new type is compatible with the parent type.

              \(prop.location.displayUri)
              """)
      )
      .mapValues((_, prop: reflect.Property) ->
        new TypescriptInterfaceProperty {
          isInherited = false
          type = typegen.generateType(prop.type, clazz, mappings)
          docComment = prop.docComment
          name = utils.toTypescriptPropertyName(prop)
          property = prop
        }
      )

local function doesNotInherit(clazz: reflect.Class?) =
  clazz.superclass == null || clazz.superclass.reflectee == Module || clazz.superclass.reflectee == Typed

// local methodsToGenerate = fields.filter((_, field) -> !field.isInherited)
local interface: String = new Listing {
  when (clazz.docComment != null) {
    utils.renderDocComment(clazz.docComment!!, "")
  }
  (
    "export interface \(classInfo.interface.name) " +
    (if (superClass != null)
      "extends " + superClass.type.render(classInfo.typescriptModule) + " "
      else "")
    + "{"
  )

  for (pklPropertyName, field in fields) {
    when (pklPropertyName != fields.keys.first) {
      ""
    }
    when (field.docComment != null) {
      utils.renderDocComment(field.docComment!!, "  ")
    }
    renderInterfaceProperty(pklPropertyName, field)
  }
  "}"
}
  .join("\n")

local function renderInterfaceProperty(pklPropertyName: String, field: TypescriptInterfaceProperty): String =
  new Listing {
    "  "
    field.name
    ": "
    field.type.render(classInfo.typescriptModule)
  }.join("")

local class TypescriptInterfaceProperty {
  /// Is this field inherited from a parent?
  isInherited: Boolean

  /// The name of the field
  name: String

  /// The Go type associated with this field
  type: Type

  /// The doc comments on the field
  docComment: String?

  /// The Pkl property behind the field
  property: reflect.Property
}
